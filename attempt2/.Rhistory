data1$action[data1$action==X[4]] <- "reopened"
data1$action[data1$action==X[5]] <- "No violations"
data1$action[data1$action==X[6]] <- "violations cited"
# 6. We want to filter out missing values to make our lives easier for further analysis.
# 7. Select the following columns from raw.df: camis, boro, cuisine, inspection.date, action, score, grade, month
# 8. Unique inspections
View(data1)
View(data1)
class()
class(X)
typeof(X)
class(data$action)
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
library(dplyr)
colnames(data)=tolower(colnames(data))
#data=data%>% rename(.,cuisine=`cuisine description`)
#data=data%>% rename(.,inspection.date=`inspection date`)
# 2. Convert the inspection.date column from character to date format.
data$inspection.date=as.Date(data$inspection.date,"%m/%d/%y")
# 3. Mutate a new column called month that extract the month from inspection.date and convert it to numeric. For example, 03/24/2016 -> 03
library(lubridate)
data=data%>%mutate(.,month=month(data$inspection.date))
# 4. Impute the missing values for the 'grade' column
data$grade[(data$score>0)&(data$score<14)] <- "A"
data$grade[(data$score<28)&(14<=data$score)] <- "B"
data$grade[(data$score>28)] <- "C"
# 5. Rename the description from the action column to something short so it won't blow up your graph.
data1=data
data1$action=factor(data1$action)
X=levels(data1$action)
data$action[data$action==X[2]] <- "Closed, Action needed"
data$action[data$action==X[3]] <- "reclosed"
data$action[data$action==X[4]] <- "reopened"
data$action[data$action==X[5]] <- "No violations"
data$action[data$action==X[6]] <- "violations cited"
# 6. We want to filter out missing values to make our lives easier for further analysis.
# 7. Select the following columns from raw.df: camis, boro, cuisine, inspection.date, action, score, grade, month
# 8. Unique inspections
View(data)
View(data)
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
library(dplyr)
colnames(data)=tolower(colnames(data))
#data=data%>% rename(.,cuisine=`cuisine description`)
#data=data%>% rename(.,inspection.date=`inspection date`)
# 2. Convert the inspection.date column from character to date format.
data$inspection.date=as.Date(data$inspection.date,"%m/%d/%y")
# 3. Mutate a new column called month that extract the month from inspection.date and convert it to numeric. For example, 03/24/2016 -> 03
library(lubridate)
data=data%>%mutate(.,month=month(data$inspection.date))
# 4. Impute the missing values for the 'grade' column
data$grade[(data$score>0)&(data$score<14)] <- "A"
data$grade[(data$score<28)&(14<=data$score)] <- "B"
data$grade[(data$score>28)] <- "C"
# 5. Rename the description from the action column to something short so it won't blow up your graph.
data1=data
data1$action=factor(data1$action)
X=levels(data1$action)
data$action[data$action==X[2]] <- "closed"
data$action[data$action==X[3]] <- "reclosed"
data$action[data$action==X[4]] <- "reopened"
data$action[data$action==X[5]] <- "no violations"
data$action[data$action==X[6]] <- "violations"
# 6. We want to filter out missing values to make our lives easier for further analysis.
data%>%filter(., data$boro =! "Missins")
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
library(dplyr)
colnames(data)=tolower(colnames(data))
#data=data%>% rename(.,cuisine=`cuisine description`)
#data=data%>% rename(.,inspection.date=`inspection date`)
# 2. Convert the inspection.date column from character to date format.
data$inspection.date=as.Date(data$inspection.date,"%m/%d/%y")
# 3. Mutate a new column called month that extract the month from inspection.date and convert it to numeric. For example, 03/24/2016 -> 03
library(lubridate)
data=data%>%mutate(.,month=month(data$inspection.date))
# 4. Impute the missing values for the 'grade' column
data$grade[(data$score>0)&(data$score<14)] <- "A"
data$grade[(data$score<28)&(14<=data$score)] <- "B"
data$grade[(data$score>28)] <- "C"
# 5. Rename the description from the action column to something short so it won't blow up your graph.
data1=data
data1$action=factor(data1$action)
X=levels(data1$action)
data$action[data$action==X[2]] <- "closed"
data$action[data$action==X[3]] <- "reclosed"
data$action[data$action==X[4]] <- "reopened"
data$action[data$action==X[5]] <- "no violations"
data$action[data$action==X[6]] <- "violations"
# 6. We want to filter out missing values to make our lives easier for further analysis.
data%>%filter(., boro =! "Missing")
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
library(dplyr)
colnames(data)=tolower(colnames(data))
#data=data%>% rename(.,cuisine=`cuisine description`)
#data=data%>% rename(.,inspection.date=`inspection date`)
# 2. Convert the inspection.date column from character to date format.
data$inspection.date=as.Date(data$inspection.date,"%m/%d/%y")
# 3. Mutate a new column called month that extract the month from inspection.date and convert it to numeric. For example, 03/24/2016 -> 03
library(lubridate)
data=data%>%mutate(.,month=month(data$inspection.date))
# 4. Impute the missing values for the 'grade' column
data$grade[(data$score>0)&(data$score<14)] <- "A"
data$grade[(data$score<28)&(14<=data$score)] <- "B"
data$grade[(data$score>28)] <- "C"
# 5. Rename the description from the action column to something short so it won't blow up your graph.
data1=data
data1$action=factor(data1$action)
X=levels(data1$action)
data$action[data$action==X[2]] <- "closed"
data$action[data$action==X[3]] <- "reclosed"
data$action[data$action==X[4]] <- "reopened"
data$action[data$action==X[5]] <- "no violations"
data$action[data$action==X[6]] <- "violations"
# 6. We want to filter out missing values to make our lives easier for further analysis.
data%>%filter(., boro %in% c("BRONX","MANHATTAN","BROOKLYN","QUEENS","STATEN ISLAND"))
# 7. Select the following columns from raw.df: camis, boro, cuisine, inspection.date, action, score, grade, month
# 8. Unique inspections
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
library(dplyr)
colnames(data)=tolower(colnames(data))
#data=data%>% rename(.,cuisine=`cuisine description`)
#data=data%>% rename(.,inspection.date=`inspection date`)
# 2. Convert the inspection.date column from character to date format.
data$inspection.date=as.Date(data$inspection.date,"%m/%d/%y")
# 3. Mutate a new column called month that extract the month from inspection.date and convert it to numeric. For example, 03/24/2016 -> 03
library(lubridate)
data=data%>%mutate(.,month=month(data$inspection.date))
# 4. Impute the missing values for the 'grade' column
data$grade[(data$score>0)&(data$score<14)] <- "A"
data$grade[(data$score<28)&(14<=data$score)] <- "B"
data$grade[(data$score>28)] <- "C"
# 5. Rename the description from the action column to something short so it won't blow up your graph.
data1=data
data1$action=factor(data1$action)
X=levels(data1$action)
data$action[data$action==X[2]] <- "closed"
data$action[data$action==X[3]] <- "reclosed"
data$action[data$action==X[4]] <- "reopened"
data$action[data$action==X[5]] <- "no violations"
data$action[data$action==X[6]] <- "violations"
# 6. We want to filter out missing values to make our lives easier for further analysis.
data=data%>%filter(., boro %in% c("BRONX","MANHATTAN","BROOKLYN","QUEENS","STATEN ISLAND"))
# 7. Select the following columns from raw.df: camis, boro, cuisine, inspection.date, action, score, grade, month
# 8. Unique inspections
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
library(dplyr)
colnames(data)=tolower(colnames(data))
#data=data%>% rename(.,cuisine=`cuisine description`)
#data=data%>% rename(.,inspection.date=`inspection date`)
# 2. Convert the inspection.date column from character to date format.
data$inspection.date=as.Date(data$inspection.date,"%m/%d/%y")
# 3. Mutate a new column called month that extract the month from inspection.date and convert it to numeric. For example, 03/24/2016 -> 03
library(lubridate)
data=data%>%mutate(.,month=month(data$inspection.date))
# 4. Impute the missing values for the 'grade' column
data$grade[(data$score>0)&(data$score<14)] <- "A"
data$grade[(data$score<28)&(14<=data$score)] <- "B"
data$grade[(data$score>28)] <- "C"
# 5. Rename the description from the action column to something short so it won't blow up your graph.
data1=data
data1$action=factor(data1$action)
X=levels(data1$action)
data$action[data$action==X[2]] <- "closed"
data$action[data$action==X[3]] <- "reclosed"
data$action[data$action==X[4]] <- "reopened"
data$action[data$action==X[5]] <- "no violations"
data$action[data$action==X[6]] <- "violations"
# 6. We want to filter out missing values to make our lives easier for further analysis.
data=data%>%filter(., boro %in% c("BRONX","MANHATTAN","BROOKLYN","QUEENS","STATEN ISLAND"))
data=data%>%filter(., score>0)
# 7. Select the following columns from raw.df: camis, boro, cuisine, inspection.date, action, score, grade, month
# 8. Unique inspections
class(data$inspection.date)
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
library(dplyr)
colnames(data)=tolower(colnames(data))
#data=data%>% rename(.,cuisine=`cuisine description`)
#data=data%>% rename(.,inspection.date=`inspection date`)
# 2. Convert the inspection.date column from character to date format.
data$inspection.date=as.Date(data$inspection.date,"%m/%d/%y")
# 3. Mutate a new column called month that extract the month from inspection.date and convert it to numeric. For example, 03/24/2016 -> 03
library(lubridate)
data=data%>%mutate(.,month=month(data$inspection.date))
# 4. Impute the missing values for the 'grade' column
data$grade[(data$score>0)&(data$score<14)] <- "A"
data$grade[(data$score<28)&(14<=data$score)] <- "B"
data$grade[(data$score>28)] <- "C"
# 5. Rename the description from the action column to something short so it won't blow up your graph.
data1=data
data1$action=factor(data1$action)
X=levels(data1$action)
data$action[data$action==X[2]] <- "closed"
data$action[data$action==X[3]] <- "reclosed"
data$action[data$action==X[4]] <- "reopened"
data$action[data$action==X[5]] <- "no violations"
data$action[data$action==X[6]] <- "violations"
# 6. We want to filter out missing values to make our lives easier for further analysis.
data=data%>%filter(., boro %in% c("BRONX","MANHATTAN","BROOKLYN","QUEENS","STATEN ISLAND"))
data=data%>%filter(., score>0)
data=data%>%filter(., year(inspection.date)%in%c(1980:2020))
# 7. Select the following columns from raw.df: camis, boro, cuisine, inspection.date, action, score, grade, month
# 8. Unique inspections
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
library(dplyr)
colnames(data)=tolower(colnames(data))
#data=data%>% rename(.,cuisine=`cuisine description`)
#data=data%>% rename(.,inspection.date=`inspection date`)
# 2. Convert the inspection.date column from character to date format.
data$inspection.date=as.Date(data$inspection.date,"%m/%d/%y")
# 3. Mutate a new column called month that extract the month from inspection.date and convert it to numeric. For example, 03/24/2016 -> 03
library(lubridate)
data=data%>%mutate(.,month=month(data$inspection.date))
# 4. Impute the missing values for the 'grade' column
data$grade[(data$score>0)&(data$score<14)] <- "A"
data$grade[(data$score<28)&(14<=data$score)] <- "B"
data$grade[(data$score>28)] <- "C"
# 5. Rename the description from the action column to something short so it won't blow up your graph.
data1=data
data1$action=factor(data1$action)
X=levels(data1$action)
data$action[data$action==X[2]] <- "closed"
data$action[data$action==X[3]] <- "reclosed"
data$action[data$action==X[4]] <- "reopened"
data$action[data$action==X[5]] <- "no violations"
data$action[data$action==X[6]] <- "violations"
# 6. We want to filter out missing values to make our lives easier for further analysis.
data=data%>%filter(., boro %in% c("BRONX","MANHATTAN","BROOKLYN","QUEENS","STATEN ISLAND"))
data=data%>%filter(., score>0)
data=data%>%filter(., year(inspection.date)%in%c(1980:2020))
# 7. Select the following columns from raw.df: camis, boro, cuisine, inspection.date, action, score, grade, month
data%>%select., camis, boro, cuisine, inspection.date, action, score, grade, month)
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
library(dplyr)
colnames(data)=tolower(colnames(data))
#data=data%>% rename(.,cuisine=`cuisine description`)
#data=data%>% rename(.,inspection.date=`inspection date`)
# 2. Convert the inspection.date column from character to date format.
data$inspection.date=as.Date(data$inspection.date,"%m/%d/%y")
# 3. Mutate a new column called month that extract the month from inspection.date and convert it to numeric. For example, 03/24/2016 -> 03
library(lubridate)
data=data%>%mutate(.,month=month(data$inspection.date))
# 4. Impute the missing values for the 'grade' column
data$grade[(data$score>0)&(data$score<14)] <- "A"
data$grade[(data$score<28)&(14<=data$score)] <- "B"
data$grade[(data$score>28)] <- "C"
# 5. Rename the description from the action column to something short so it won't blow up your graph.
data1=data
data1$action=factor(data1$action)
X=levels(data1$action)
data$action[data$action==X[2]] <- "closed"
data$action[data$action==X[3]] <- "reclosed"
data$action[data$action==X[4]] <- "reopened"
data$action[data$action==X[5]] <- "no violations"
data$action[data$action==X[6]] <- "violations"
# 6. We want to filter out missing values to make our lives easier for further analysis.
data=data%>%filter(., boro %in% c("BRONX","MANHATTAN","BROOKLYN","QUEENS","STATEN ISLAND"))
data=data%>%filter(., score>0)
data=data%>%filter(., year(inspection.date)%in%c(1980:2020))
# 7. Select the following columns from raw.df: camis, boro, cuisine, inspection.date, action, score, grade, month
data%>%select(., camis, boro, cuisine, inspection.date, action, score, grade, month)
# 8. Unique inspections
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
library(dplyr)
colnames(data)=tolower(colnames(data))
#data=data%>% rename(.,cuisine=`cuisine description`)
#data=data%>% rename(.,inspection.date=`inspection date`)
# 2. Convert the inspection.date column from character to date format.
data$inspection.date=as.Date(data$inspection.date,"%m/%d/%y")
# 3. Mutate a new column called month that extract the month from inspection.date and convert it to numeric. For example, 03/24/2016 -> 03
library(lubridate)
data=data%>%mutate(.,month=month(data$inspection.date))
# 4. Impute the missing values for the 'grade' column
data$grade[(data$score>0)&(data$score<14)] <- "A"
data$grade[(data$score<28)&(14<=data$score)] <- "B"
data$grade[(data$score>28)] <- "C"
# 5. Rename the description from the action column to something short so it won't blow up your graph.
data1=data
data1$action=factor(data1$action)
X=levels(data1$action)
data$action[data$action==X[2]] <- "closed"
data$action[data$action==X[3]] <- "reclosed"
data$action[data$action==X[4]] <- "reopened"
data$action[data$action==X[5]] <- "no violations"
data$action[data$action==X[6]] <- "violations"
# 6. We want to filter out missing values to make our lives easier for further analysis.
data=data%>%filter(., boro %in% c("BRONX","MANHATTAN","BROOKLYN","QUEENS","STATEN ISLAND"))
data=data%>%filter(., score>0)
data=data%>%filter(., year(inspection.date)%in%c(1980:2020))
# 7. Select the following columns from raw.df: camis, boro, cuisine, inspection.date, action, score, grade, month
data7=data%>%select(., camis, boro, cuisine, inspection.date, action, score, grade, month)
# 8. Unique inspections
insoections=unique(data7)
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
library(dplyr)
colnames(data)=tolower(colnames(data))
#data=data%>% rename(.,cuisine=`cuisine description`)
#data=data%>% rename(.,inspection.date=`inspection date`)
# 2. Convert the inspection.date column from character to date format.
data$inspection.date=as.Date(data$inspection.date,"%m/%d/%y")
# 3. Mutate a new column called month that extract the month from inspection.date and convert it to numeric. For example, 03/24/2016 -> 03
library(lubridate)
data=data%>%mutate(.,month=month(data$inspection.date))
# 4. Impute the missing values for the 'grade' column
data$grade[(data$score>0)&(data$score<14)] <- "A"
data$grade[(data$score<28)&(14<=data$score)] <- "B"
data$grade[(data$score>28)] <- "C"
# 5. Rename the description from the action column to something short so it won't blow up your graph.
data1=data
data1$action=factor(data1$action)
X=levels(data1$action)
data$action[data$action==X[2]] <- "closed"
data$action[data$action==X[3]] <- "reclosed"
data$action[data$action==X[4]] <- "reopened"
data$action[data$action==X[5]] <- "no violations"
data$action[data$action==X[6]] <- "violations"
# 6. We want to filter out missing values to make our lives easier for further analysis.
data=data%>%filter(., boro %in% c("BRONX","MANHATTAN","BROOKLYN","QUEENS","STATEN ISLAND"))
data=data%>%filter(., score>0)
data=data%>%filter(., year(inspection.date)%in%c(1980:2020))
# 7. Select the following columns from raw.df: camis, boro, cuisine, inspection.date, action, score, grade, month
data7=data%>%select(., camis, boro, cuisine, inspection.date, action, score, grade, month)
# 8. Unique inspections
inspections=unique(data7)
x
X
X=levels(data1$action)
X
View(inspections)
View(inspections)
library(ggplot2)
ggplot(data = inpspection, aes(x = boro)) + geom_bar(aes(fill = grade), position = "dodge")
library(ggplot2)
ggplot(data = inpspections, aes(x = boro)) + geom_bar(aes(fill = grade), position = "dodge")
View(inspections)
View(inspections)
library(ggplot2)
ggplot(data = inspections, aes(x = boro)) + geom_bar(aes(fill = grade), position = "dodge")
View(inspections)
set1=inspections%>% arrange(.,score)[1:20,]
set1=inspections%>% arrange(.,score)
set1=set1[1:20,]
ggplot(data = inspections, aes(x = boro)) + geom_bar(aes(fill = grade), position = "dodge")
set1=inspections%>% arrange(.,score)
set1=set1[1:20,]
ggplot(data = set1, aes(x = cuisine)) + geom_bar(aes(fill = grade), position = "dodge")
set1=inspections%>% arrange(.,score)
set1=set1[1:20,]
ggplot(data = set1, aes(x = cuisine)) + geom_bar(aes(fill = grade), position = "count")
set1=inspections%>% arrange(.,score)
set1=set1[1:20,]
ggplot(data = set1, aes(x = cuisine)) + geom_bar(aes(fill = grade), position = "identity")
set1=inspections%>% arrange(.,score)
set1=set1[1:20,]
ggplot(data = set1, aes(x = cuisine)) + geom_bar(aes(fill = grade), position = "fill")
set1=inspections%>% arrange(.,score)
set1=set1[1:20,]
ggplot(data = set1, aes(x = cuisine)) + geom_bar(aes(fill = score), position = "idnetity")
set1=inspections%>% arrange(.,score)
set1=set1[1:20,]
set1=set1%>%group_by(.,cuisine)
set1=set1%>%summarise(.,aveg=mean(score))
ggplot(data = set1, aes(x = cuisine)) + geom_bar(aes(fill = aveg), position = "idnetity")
View(set1)
View(set1)
set1=inspections%>% arrange(.,score)
set1=set1[1:20,]
set1=set1%>%group_by(.,cuisine)
#set1=set1%>%summarise(.,aveg=mean(score))
#ggplot(data = set1, aes(x = cuisine)) + geom_bar(aes(fill = aveg), position = "idnetity")
View(set1)
View(set1)
set1=inspections%>% arrange(.,score)
set1=set1[1:20,]
ggplot(data = set1, aes(x = cuisine)) + geom_bar(aes(fill = grade), position = "fill")
set1=inspections%>% arrange(.,score)
set1=set1[1:20,]
set1=inspections%>% arrange(.,score)
set1=set1[1:20,]
g + geom_density(aes(color = cut)) + zoom
set1=inspections%>% arrange(.,score)
set1=set1[1:20,]
set1 + geom_density(aes(color = cut)) + zoom
set1=inspections%>% arrange(.,score)
set1=set1[1:20,]
ggplot(data = set1, aes(x = cuisine)) + geom_density(aes(color = boro)) + zoom
set1=inspections%>% arrange(.,score)
set1=set1[1:20,]
ggplot(data = set1, aes(x = cuisine)) + geom_density(aes(color = boro))
set1=inspections%>% arrange(.,score)
ggplot(data = set1, aes(x = grade)) + geom_density(aes(color = boro))
set1=inspections%>% arrange(.,score)
set1=set1%>%filter(.,grade%in%c("A","B","C"))
ggplot(data = set1, aes(x = grade)) + geom_density(aes(color = boro))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(temp)
View(temp)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(temp1)
View(temp1)
source('~/.active-rstudio-document', echo=TRUE)
View(temp1)
View(temp1)
t.test(temp$Body.Temp)
t.test(temp$Body.Temp,t=5.454823)
PlantGrowth
data("PlantGrowth")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
t.test(men$Body.Temp~women$Body.Temp)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(men)
View(men)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
var.test(men$Body.Temp, women$Body.Temp,  alternative = "two.sided")
t.statistic = (mean(heights) - 68)/(sd(heights)/sqrt(100))
source('C:/Users/cokwu/Downloads/FoundationsOfStatistics.R', echo=TRUE)
table(temp)
source('C:/Users/cokwu/Downloads/FoundationsOfStatistics.R', echo=TRUE)
source('C:/Users/cokwu/Downloads/FoundationsOfStatistics.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
data("PlantGrowth")
PlantGrowth
View(PlantGrowth)
View(PlantGrowth)
boxplot(weight ~ group,
col = c("red", "orange", "yellow"),
main = "Distribution of Weight Loss\nfor Various Diets")
boxplot(PlantGrowth ~ group,
col = c("red", "orange", "yellow"),
main = "Distribution of Weight Loss\nfor Various Diets")
source('C:/Users/cokwu/Downloads/FoundationsOfStatistics.R', echo=TRUE)
source('C:/Users/cokwu/Downloads/FoundationsOfStatistics.R', echo=TRUE)
boxplot(PlantGrowth ~ group,
col = c("red", "orange", "yellow"),
main = "Distribution of Weight Loss\nfor Various Diets")
boxplot(PlantGrowth ~ 'group',
col = c("red", "orange", "yellow"),
main = "Distribution of Weight Loss\nfor Various Diets")
ggplot(data = PlantGrowth, aes(x = group))+geom_boxplot()
ggplot(data = PlantGrowth, aes(x = group,y=weight))+geom_boxplot()
bartlett.test(PlantGrowth)
aov(PlantGrowth)
aov(PlantGrowth)
aov(PlantGrowth$group)
aov(PlantGrowth$group)
head(chickwts)
summary(aov(PlantGrowth$weight ~ PlantGrowth$group))
data("HairEyeColor")
data("HairEyeColor")
head(HairEyeColor)
HairEyeColor
mosaicplot(HairEyeColor, shade = TRUE)`
mosaicplot(HairEyeColor, shade = TRUE)
l=mosaicplot(HairEyeColor, shade = TRUE)
l
HairEyeColor
mosaicplot(HairEyeColor, shade = TRUE)
mosaicplot(HairEyeColor, shade = TRUE)[,1:2]
#mosaicplot(HairEyeColor, shade = TRUE)
mosaicplot(HairEyeColor, shade = TRUE)[,1:2]
#mosaicplot(HairEyeColor, shade = TRUE)
mosaicplot(HairEyeColor, shade = TRUE)[,1:2,2]
#mosaicplot(HairEyeColor, shade = TRUE)
mosaicplot(HairEyeColor, shade = TRUE)[,1:2,2]
#mosaicplot(HairEyeColor, shade = TRUE)
mosaicplot(HairEyeColor, shade = TRUE)[,1:2,2]
#mosaicplot(HairEyeColor, shade = TRUE)
mosaicplot(HairEyeColor[,1:2,2], shade = TRUE)
#mosaicplot(HairEyeColor, shade = TRUE)
l=HairEyeColor[,1:2,2]
mosaicplot(HairEyeColor[,1:2,2], shade = TRUE)
chisq.test(quiz.data)
#mosaicplot(HairEyeColor, shade = TRUE)
l=HairEyeColor[,1:2,2]
mosaicplot(HairEyeColor[,1:2,2], shade = TRUE)
chisq.test(l)
mosaicplot(HairEyeColor, shade = TRUE)[,1:2,2]
chisq.test(l)
chisq.test(l)
l
mosaicplot(HairEyeColor, shade = TRUE)
#l=HairEyeColor[,1:2,2]
#mosaicplot(HairEyeColor[,1:2,2], shade = TRUE)
#chisq.test(l)
mosaicplot(HairEyeColor, shade = TRUE)
#l=HairEyeColor[,1:2,2]
#mosaicplot(HairEyeColor[,1:2,2], shade = TRUE)
#chisq.test(l)
#1
#mosaicplot(HairEyeColor, shade = TRUE)
#the one that recievew the most is females with blonde hair and brown eyes
#2
l=HairEyeColor[,1:2,2]
mosaicplot(HairEyeColor[,1:2,2], shade = TRUE)
chisq.test(l)
source('~/.active-rstudio-document', echo=TRUE)
shiny::runApp('C:/Users/cokwu/OneDrive/Desktop/attempt2')
gtd=read.csv("globalTerrorism.csv")
setwd("C:/Users/cokwu/OneDrive/Desktop/attempt2")
gtd=read.csv("globalTerrorism.csv")
